import 'package:atho/controllers/login_controller.dart';
import 'package:atho/models/logindata.dart';
import 'package:atho/models/user.dart';
import 'package:atho/repositories/account_repository.dart';
import 'package:atho/repositories/api.dart';
import 'package:atho/stores/app.store.dart';
import 'package:atho/views/widgets/animated_text_form_field.dart';
import 'package:flutter/material.dart';
import 'package:flutter_login/flutter_login.dart';
// import 'package:flutter_login_facebook/flutter_login_facebook.dart';
// import 'package:flutter_signin_button/flutter_signin_button.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:provider/provider.dart';

class HorizontalOrLine extends StatelessWidget {
  final String label;

  final double height;
  const HorizontalOrLine({
    required this.label,
    required this.height,
  });

  @override
  Widget build(BuildContext context) {
    return Row(children: <Widget>[
      Expanded(
        child: new Container(
            margin: const EdgeInsets.only(left: 10.0, right: 15.0),
            child: Divider(
              color: Colors.black,
              height: height,
            )),
      ),
      Text(label),
      Expanded(
        child: new Container(
            margin: const EdgeInsets.only(left: 15.0, right: 10.0),
            child: Divider(
              color: Colors.black,
              height: height,
            )),
      ),
    ]);
  }
}

class LoginView extends StatefulWidget {
  @override
  _LoginViewState createState() => _LoginViewState();
}

class _LoginViewState extends State<LoginView> with TickerProviderStateMixin {
  final emailController = new TextEditingController();
  final passController = new TextEditingController();

  LoginController? _controller;
  late bool _continuelog;
  late bool isButtonDisabled;
  // late FacebookLogin plugin;
  late AnimationController _loadingController;
  late AnimationController _animPasswordController;
  late Animation<double> _animationPassword;

  Widget build(BuildContext context) {
    final store = Provider.of<AppStore>(context, listen: false);
    return Scaffold(
      backgroundColor: Colors.lightBlue,
      body: SafeArea(
        child: SingleChildScrollView(
          child: Column(
            children: [
              Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [Image.asset('assets/images/logo.png')]),
              Card(
                margin: EdgeInsets.all(24),
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.all(Radius.circular(20))),
                elevation: 10,
                child: Padding(
                  padding: EdgeInsets.fromLTRB(16, 0, 16, 20),
                  child: Form(
                    child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          SizedBox(
                            height: 60,
                          ),
                          AnimatedTextFormField(
                              labelText: 'Nome do campo',
                              loadingController: _loadingController,
                              prefixIcon:
                                  Icon(FontAwesomeIcons.solidUserCircle),
                              width: MediaQuery.of(context).size.width - 40),
                          SizedBox(height: 20.0),
                          TextFormField(
                            controller: emailController,
                            onChanged: _onchanged,
                            keyboardType: TextInputType.emailAddress,
                            decoration: InputDecoration(
                              prefixIcon: Icon(FontAwesomeIcons.envelope),
                              labelText: 'Email',
                            ),
                            //filled: true,
                          ),
                          SizedBox(height: 20.0),
                          TextFormField(
                            obscureText: true,
                            controller: passController,
                            keyboardType: TextInputType.text,
                            decoration: InputDecoration(
                              prefixIcon: Icon(FontAwesomeIcons.lock),
                              labelText: 'Senha',
                            ),
                          ),
                          SizedBox(height: 20.0),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.end,
                            children: [
                              Text('Continuar logado'),
                              Switch(
                                value: _continuelog,
                                onChanged: (v) {
                                  setState(() {
                                    print(v);
                                    _continuelog = !_continuelog;
                                    Navigator.pushNamed(context, '/login2');
                                  });
                                },
                                activeColor: Theme.of(context).primaryColor,
                                //activeTrackColor: Theme.of(context).primaryColor,
                              ),
                            ],
                          ),
                          Column(
                              crossAxisAlignment: CrossAxisAlignment.stretch,
                              children: [
                                FlatButton(
                                    onPressed: () {
                                      // _loadingController.forward();
                                      _loadingController.animateTo(
                                          _loadingController.value == 1
                                              ? 0
                                              : 1);
                                    },
                                    child: Text('Anim')),
                                FlatButton(
                                    onPressed: isButtonDisabled
                                        ? null
                                        : () {
                                            _login(store);
                                          },
                                    splashColor: Colors.white,
                                    color: Theme.of(context).primaryColor,
                                    disabledColor: Colors.grey[300],
                                    padding: EdgeInsets.all(16.0),
                                    child: Text('CONTINUAR',
                                        style: TextStyle(color: Colors.white))),
                              ]),
                          HorizontalOrLine(
                            label: 'OU',
                            height: 80,
                          ),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.stretch,
                            children: [
                              SignInButton(
                                Buttons.FacebookNew,
                                text: 'Entrar com o Facebook',
                                padding: EdgeInsets.symmetric(vertical: 12),
                                onPressed: _onPressedFacebookLogInButton,
                              )
                            ],
                          ),
                        ]),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    super.dispose();
    _loadingController.dispose();
    _animPasswordController.dispose();
  }

  @override
  void initState() {
    super.initState();
    //timeDilation = 5;
    _continuelog = false;
    isButtonDisabled = true;
    plugin = FacebookLogin(debug: true);
    _updateLoginInfo();

    _controller = LoginController(AccountRepository(api));

    _loadingController = (AnimationController(
      vsync: this,
      // duration: Duration(milliseconds: 1150),
      duration: Duration(milliseconds: 1400),
      // reverseDuration: Duration(milliseconds: 300),
    ));
    Future.delayed(const Duration(seconds: 3), () {
      _loadingController.forward();
    });
    _animationPassword = CurvedAnimation(
      parent: _animationPassword,
      curve: Curves.fastOutSlowIn,
    );
  }

  _login(AppStore store) async {
    final logindata =
        LoginModel(email: emailController.text, password: passController.text);

    final UserModel user = await _controller!.login(logindata);

    if (_controller?.state == LoginState.success) {
      store.setUser(user);
      Navigator.pushReplacementNamed(context, '/home');
    } else if (_controller?.state == LoginState.error) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('Usuário ou senha inválida.')));
    }
    // _controller
    //     .login(LoginModel(
    //         email: emailController.text, password: passController.text))
    //     .then((data) {
    //   store.setUser(data);
    //   Navigator.pushReplacementNamed(context, '/signup');
    // }).catchError((error) {
    //   ScaffoldMessenger.of(context)
    //       .showSnackBar(SnackBar(content: Text(error)));
    // });
  }

  Future<String> _loginUser(LoginData data) {
    return Future.delayed(Duration(milliseconds: 200))
        .then((_) => 'Password does not match');
  }

  void _onchanged(email) async {
    RegExp emailPattern = RegExp(
        r'^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$');
    //print(email + ' ' + emailPattern.hasMatch(email).toString());
    setState(() {
      isButtonDisabled = !emailPattern.hasMatch(email);
      _animPasswordController.forward();
      //_loadingController.animateBack(0);
      // isButtonDisabled
      //     ? _loadingController.forward()
      //     : _loadingController.animateBack(0);
    });
  }

  void _onPressedFacebookLogInButton() async {
    await plugin.logIn(permissions: [
      FacebookPermission.publicProfile,
      FacebookPermission.email,
    ]);
    _updateLoginInfo();
  }

  Future<String> _recoverPassword(String name) {
    return Future.delayed(Duration(milliseconds: 200))
        .then((_) => 'Username not exists');
  }

  void _updateLoginInfo() async {
    final token = await plugin.accessToken;
    FacebookUserProfile? profile;
    String? email = '';
    String? imageUrl;

    if (token != null) {
      profile = await plugin.getUserProfile();
      if (token.permissions.contains(FacebookPermission.email.name))
        email = await plugin.getUserEmail();
      imageUrl = await plugin.getProfileImageUrl(width: 100);
    }

    setState(() {
      print('Email=> ' + email!);
      // _token = token;
      // _profile = profile;
      // _email = email;
      // _imageUrl = imageUrl;
    });
  }
}
